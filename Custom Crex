// ==UserScript==
// @name         Custom Crex
// @namespace    http://tampermonkey.net/
// @version      0.9
// @description  try to take over the world!
// @author       You
// @match        https://crex.live/scoreboard/*
// @icon         https://crex.live/assets/icon/favicon.ico
// @grant        none
// @run-at       document-idle
// ==/UserScript==

var isMute = localStorage.getItem('isMute');
var volume = localStorage.getItem('volume');

isMute = isMute !== null ? isMute: true;
volume = volume !== null ? volume: '50';

isMute = isMute === 'true'; // String to boolean conversion.

const container_div = 'body > app-root > div > app-match-details > div.live-score-header.mob-none > app-match-details-wrapper > div > div > div.team-result > div';
const score_element = 'body > app-root > div > app-match-details > div.live-score-header.mob-none > app-match-details-wrapper > div > div > div.team-result > div > span';
const score_selector1 = 'body > app-root > div > app-match-details > div.live-score-header.mob-none > app-match-details-wrapper > div > div > div:nth-child(1) > div.team-content > div.team-score > div > span:nth-child(1)';
const score_selector2 = 'body > app-root > div > app-match-details > div.live-score-header.mob-none > app-match-details-wrapper > div > div > div:nth-child(1) > div.team-content > div.team-score > div > span:nth-child(2)';
const stream_container = 'body > app-root > div > app-match-details > div.match-detail-route-wrap > div > app-match-live > div > div.live-right-sidebar.m-none';
const sream_link = 'crex.live';

(function() {
    'use strict';
    waitForElementToExist(stream_container).then(element => {
        var inputContainer = document.createElement('div');
        inputContainer.setAttribute('style', 'display: flex; align-items: center; margin-bottom: 10px;');

        var iframe_link = document.createElement('input');
        iframe_link.setAttribute('type', 'text');
        iframe_link.setAttribute('placeholder', 'Stream link');
        iframe_link.setAttribute('id', 'iframeLink');
        iframe_link.setAttribute('style', 'flex: 1; padding: 5px; box-sizing: border-box;');

        var playButton = document.createElement('button');
        playButton.setAttribute('type', 'button');
        playButton.setAttribute('id', 'playButton');
        playButton.setAttribute('style', 'padding: 5px 10px; margin-left: 5px; cursor: pointer;');
        playButton.innerHTML = 'â–¶'; // Add play icon (text representation)

        inputContainer.appendChild(iframe_link);
        inputContainer.appendChild(playButton);

        var iframe = document.createElement('iframe');
        iframe.setAttribute('id', 'myFrame');
        iframe.setAttribute('src', sream_link);
        iframe.setAttribute('width', '100%');
        iframe.setAttribute('height', '100%');
        iframe.setAttribute('marginheight', '0');
        iframe.setAttribute('marginwidth', '0');
        iframe.setAttribute('scrolling', 'no');
        iframe.setAttribute('frameborder', '0');
        iframe.setAttribute('allowfullscreen', '');
        iframe.setAttribute('allow', 'encrypted-media');
        iframe.setAttribute('style', 'height: 205px; border: 5px solid rgba(var(--ce_low_contrast_fg_rgb),.4);');
        var firstElement = element.firstElementChild;
        var clonedElement = firstElement.cloneNode(false);

        clonedElement.appendChild(inputContainer);
        clonedElement.appendChild(iframe);
        element.insertBefore(clonedElement, element.firstChild);

        playButton.addEventListener('click', function() {
            const inputLink = iframe_link.value;
            if (inputLink) {
                iframe.setAttribute('src', inputLink);
            } else {
                alert('Please enter a valid link.');
            }
        });

    });

    waitForElementToExist(container_div).then(element => {
        var myDiv = element;
        //console.info(myDiv)
        myDiv.style.display = "flex";
        myDiv.style.flexDirection = "column";

        const voiceSelector_Elem = document.createElement("div");
        const voiceSelector = document.createElement('select');
        voiceSelector.id = 'voiceSelect';
        voiceSelector.className = "none";

        voiceSelector_Elem.appendChild(voiceSelector);

        const TopElement = document.createElement("div");
        TopElement.style.display = 'flex';
        TopElement.style.alignItems = 'center';
        TopElement.style.padding = '10px';



        const newElement_1 = document.createElement("div");
        newElement_1.textContent = "ðŸ”‡";
        newElement_1.id = "mute-btn";
        newElement_1.style.cursor = "pointer";
        newElement_1.style.padding = '10px';

        const newElement_2 = document.createElement("div");
        newElement_2.textContent = "ðŸ”‡";
        newElement_2.id = "mute-btn";
        newElement_2.style.cursor = "pointer";
        newElement_2.style.padding = '10px';
        //newElement.setAttribute('_ngcontent-app-root-c17', '');

        const volumeSliderContainer = document.createElement('div');
        volumeSliderContainer.className = 'volume-slider-container';

        // Create the low volume icon
        const lowVolumeIcon = document.createElement('span');
        lowVolumeIcon.className = 'volume-icon';
        lowVolumeIcon.textContent = 'ðŸ”‰';

        // Create the volume slider
        const volumeSlider = document.createElement('input');
        volumeSlider.type = 'range';
        volumeSlider.className = 'volume-slider';
        volumeSlider.min = '0';
        volumeSlider.max = '100';
        volumeSlider.value = volume;

        // Create the high volume icon
        const highVolumeIcon = document.createElement('span');
        highVolumeIcon.className = 'volume-icon';
        highVolumeIcon.textContent = 'ðŸ”Š';

        // Append the elements to the volume slider container
        volumeSliderContainer.appendChild(lowVolumeIcon);
        volumeSliderContainer.appendChild(volumeSlider);
        volumeSliderContainer.appendChild(highVolumeIcon);

        volumeSliderContainer.style.display = 'flex';
        volumeSliderContainer.style.alignItems = 'center';

        TopElement.appendChild(newElement_1);
        TopElement.appendChild(voiceSelector_Elem);
        TopElement.appendChild(newElement_2);

        myDiv.insertBefore(TopElement, myDiv.firstChild);
        myDiv.insertBefore(volumeSliderContainer, myDiv.firstChild.nextSibling);
        //myDiv.appendChild(voiceSelector_Elem);
        //myDiv.insertBefore(volumeSliderContainer, myDiv.firstChild.nextSibling);

        if (isMute) {
            newElement_1.textContent = "ðŸ”‡";
            newElement_2.textContent = "ðŸ”‡";
            newElement_1.setAttribute("title", "Muted");
            newElement_2.setAttribute("title", "Muted");
        } else {
            newElement_1.textContent = "ðŸ”Š";
            newElement_2.textContent = "ðŸ”Š";
            newElement_1.setAttribute("title", "UnMuted");
            newElement_2.setAttribute("title", "UnMuted");
        }
        function spanClickEvent() {
            isMute = !isMute;
            //console.info(isMute);
            localStorage.setItem('isMute', isMute);
            if (isMute) {
                newElement_1.textContent = "ðŸ”‡";
                newElement_2.textContent = "ðŸ”‡";
                newElement_1.setAttribute("title", "Muted");
                newElement_2.setAttribute("title", "Muted");
                window.speechSynthesis.cancel();
            } else {
                newElement_1.textContent = "ðŸ”Š";
                newElement_2.textContent = "ðŸ”Š";
                newElement_1.setAttribute("title", "UnMuted");
                newElement_2.setAttribute("title", "UnMuted");
            }
        }
        newElement_1.addEventListener("click", spanClickEvent);
        newElement_2.addEventListener("click", spanClickEvent);

        document.addEventListener('keydown', function(event) {
            if (event.key === 'm') {
                newElement_1.click();
            }
        });

        populateVoiceList();

        volumeSlider.addEventListener('input', function() {
            volume = volumeSlider.value;
            localStorage.setItem('volume', volume);
        });


        waitForElementToExist(score_element).then(selement => {
            let one = selement;
            monitorChangesBySelector(one, changeCallback);
        });
    });
})();


function monitorChangesBySelector(targetElement, callback) {
    const observer = new MutationObserver((mutationsList, observer) => {
        callback();
    });
    const config = { childList: true, characterData: true, subtree: true, attributes: false};
    observer.observe(targetElement, config);
}

function changeCallback() {
    let one = document.querySelector(score_element);
    one.style.cursor = "pointer";
    //console.info(one.innerText);
    audioAnnouncer(one.innerText);
    scoreAnnouncer(one.innerText);
}

function audioAnnouncer(text) {
    if ('speechSynthesis' in window) {
        const synth = window.speechSynthesis;
        function speakText(text) {
            const utterance = new SpeechSynthesisUtterance(text);
            let voiceSelect = document.getElementById('voiceSelect');
            let voices = window.speechSynthesis.getVoices();
            let selectedVoice = voices.find(voice => voice.name === voiceSelect.value);
            utterance.voice = selectedVoice;
            utterance.volume = convertVolume(volume);
            synth.speak(utterance);
        }
        if (!isMute) {
            speakText(text);
        }
    } else {
        console.error('Text-to-speech is not supported in this browser.');
    }
}

function scoreAnnouncer(text) {
    if (text.toLowerCase() === 'over') {
        const promise1 = waitForElementToExist(score_selector1).then(element => element.innerText);
        const promise2 = waitForElementToExist(score_selector2).then(element => element.innerText);

        Promise.all([promise1, promise2])
            .then(([runs_wkt, overs]) => {
            //console.info(runs_wkt + ' ' + overs);
            let Score_Script = runs_wkt.replace('-', ' Runs For ') + ' Wickets and ' + parseInt(overs) + ' Overs.'
            //console.info(Score_Script);
            audioAnnouncer(Score_Script);
        })
            .catch(error => {
            console.error("Error:", error);
        });
    }
}

function convertVolume(volumeString) {
    let volumeInt = parseInt(volumeString, 10);
    if (isNaN(volumeInt) || volumeInt < 0 || volumeInt > 100) {
        throw new Error("Volume must be a string representing a number between 0 and 100.");
    }
    return volumeInt / 100;
}

function waitForElementToExist(selector) {
    return new Promise(resolve => {
        if (document.querySelector(selector)) {
            return resolve(document.querySelector(selector));
        }

        const observer = new MutationObserver(() => {
            if (document.querySelector(selector)) {
                resolve(document.querySelector(selector));
                observer.disconnect();
            }
        });

        observer.observe(document.body, {
            subtree: true,
            childList: true,
        });
    });
}

function getVoices() {
    return new Promise((resolve, reject) => {
        if ('speechSynthesis' in window) {
            let synth = window.speechSynthesis;

            synth.onvoiceschanged = () => {
                let voices = synth.getVoices();
                resolve(voices);
            };
        } else {
            reject(new Error('Speech synthesis not supported'));
        }
    });
}

function populateVoiceList() {
    let voiceSelect = document.getElementById('voiceSelect');

    getVoices()
        .then(voices => {
        voices.forEach(voice => {
            let option = document.createElement('option');
            option.textContent = voice.name;
            option.setAttribute('data-lang', voice.lang);
            option.setAttribute('data-name', voice.name);
            voiceSelect.appendChild(option);
        });
        // Set default voice if selected voice is not found in the list
        let selectedVoice = localStorage.getItem('selectedVoice');
        if (selectedVoice) {
            voiceSelect.value = selectedVoice;
        }
    })
        .catch(error => {
        console.error('Error retrieving voices:', error);
    });

    // Event listener to store selected voice in local storage
    voiceSelect.addEventListener('change', function() {
        let selectedVoice = voiceSelect.value;
        localStorage.setItem('selectedVoice', selectedVoice);
    });
}
