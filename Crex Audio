// ==UserScript==
// @name         Crex Audio
// @namespace    http://tampermonkey.net/
// @version      0.21
// @description  try to take over the world!
// @author       You
// @match        https://crex.live/*
// @icon         https://crex.live/assets/icon/favicon.ico
// @grant        none
// @run-at       document-idle
// ==/UserScript==

var isMute = true; // Declare isMute globally

(function() {
    'use strict';
    waitForElementToExist("body > app-root > div > app-match-details > div.live-score-header.mob-none > app-match-details-wrapper > div > div > div.team-result > div").then(element => {
        var myDiv = element;
        //console.info(myDiv)
        myDiv.style.display = "flex";
        myDiv.style.flexDirection = "column";
        const newElement = document.createElement("span");
        newElement.textContent = "ðŸ”‡";
        newElement.setAttribute("id", "mute-btn");
        newElement.setAttribute("_ngcontent-app-root-c17", "");
        newElement.className = "font3 font4";
        newElement.style.cursor = "pointer";
        myDiv.insertBefore(newElement, myDiv.firstChild);

        var mySpan = newElement;
        //console.info(mySpan)
        if (isMute) {
            mySpan.textContent = "ðŸ”‡";
            mySpan.setAttribute("title", "Muted");
        } else {
            mySpan.textContent = "ðŸ”Š";
            mySpan.setAttribute("title", "UnMuted");
        }
        function spanClickEvent() {
            isMute = !isMute;
            //console.info(isMute);
            if (isMute) {
                mySpan.textContent = "ðŸ”‡";
                mySpan.setAttribute("title", "Muted");
            } else {
                mySpan.textContent = "ðŸ”Š";
                mySpan.setAttribute("title", "UnMuted");
            }
        }
        mySpan.addEventListener("click", spanClickEvent);

        document.addEventListener('keydown', function(event) {
        if (event.key === 'm') {
            mySpan.click();
        }
    });

    waitForElementToExist('body > app-root > div > app-match-details > div.live-score-header.mob-none > app-match-details-wrapper > div > div > div.team-result > div > span:nth-child(2)').then(element => {
        let one = element; // Use the same element for monitoring changes
        monitorChangesBySelector(one, changeCallback);
    });
});
})();

function monitorChangesBySelector(targetElement, callback) {
    const observer = new MutationObserver((mutationsList, observer) => {
        callback();
    });
    const config = { childList: true, characterData: true, subtree: true, attributes: false};
    observer.observe(targetElement, config);
}

function changeCallback() {
    let one = document.querySelector("body > app-root > div > app-match-details > div.live-score-header.mob-none > app-match-details-wrapper > div > div > div.team-result > div > span:nth-child(2)");
    one.style.cursor = "pointer";
    //console.info(one.innerText);
    audioAnnouncer(one.innerText);
    scoreAnnouncer(one.innerText);
}

function audioAnnouncer(text) {
    if ('speechSynthesis' in window) {
        const synth = window.speechSynthesis;
        function speakText(text) {
            const utterance = new SpeechSynthesisUtterance(text);
            //utterance.lang='en-US';
            synth.speak(utterance);
        }
        if (!isMute) {
            speakText(text);
        }
    } else {
        console.error('Text-to-speech is not supported in this browser.');
    }
}

function scoreAnnouncer(text) {
    if (text.toLowerCase() === 'over') {
        const selector1 = 'body > app-root > div > app-match-details > div.live-score-header.mob-none > app-match-details-wrapper > div > div > div:nth-child(1) > div.team-content > div.team-score > div > span:nth-child(1)';
        const selector2 = 'body > app-root > div > app-match-details > div.live-score-header.mob-none > app-match-details-wrapper > div > div > div:nth-child(1) > div.team-content > div.team-score > div > span:nth-child(2)';
        const promise1 = waitForElementToExist(selector1).then(element => element.innerText);
        const promise2 = waitForElementToExist(selector2).then(element => element.innerText);

        Promise.all([promise1, promise2])
            .then(([runs_wkt, overs]) => {
                //console.info(runs_wkt + ' ' + overs);
                let Score_Script = runs_wkt.replace('-', ' Runs For ') + ' Wickets and ' + parseInt(overs) + ' Overs.'
                //console.info(Score_Script);
                audioAnnouncer(Score_Script);
            })
            .catch(error => {
                console.error("Error:", error);
            });
    }
}


function waitForElementToExist(selector) {
    return new Promise(resolve => {
        if (document.querySelector(selector)) {
            return resolve(document.querySelector(selector));
        }

        const observer = new MutationObserver(() => {
            if (document.querySelector(selector)) {
                resolve(document.querySelector(selector));
                observer.disconnect();
            }
        });

        observer.observe(document.body, {
            subtree: true,
            childList: true,
        });
    });
}
